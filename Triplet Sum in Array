void merge(int arr[],int l,int m,int r){
        int i,j,k;
        int n1 = m-l-1;
        int n2 = r-m;
        
        int L[n1],R[n2];
        
        for(i=0;i<n1;i++){
            L[i]=arr[l+i];
        }
        for(j=0;j<n2;j++){
            R[i]=arr[m+1+j];
        }
        
        i=0;
        j=0;
        k=l;
        while(i<n1 && j<n2){
            if(L[i]<=R[j]){
                arr[k]=L[i];
                i++;
            }else{
                arr[k]=R[j];
                j++;
            }
            k++;
        }
        
        while(i<n1){
            arr[k]=L[i];
            i++;
            k++;
        }
        while(j<n2){
            arr[k]=R[j];
            j++;
            k++;
        }
    }
    void mergesort(int A[],int l,int r){
        if(l<r){
            int m = l + (r - l) / 2;
            mergesort(A,l,m);
            mergesort(A,m+1,r);
            merge(A,l,m,r);
        }
    }
    bool find3Numbers(int A[], int n, int X)
    {
        //Your Code Here
        int l,r;
        mergesort(A,0,n-1);
        
        for(int i=0;i<n-2;i++){
            l=i+1;
            r=n-1;
            while(l<r){
                if(A[i]+A[l]+A[r]==X)
                    return 1;
                else if(A[i]+A[l]+A[r]<X)
                    l++;
                else
                    r--;
            }
        }
        
        return 0;
    }
